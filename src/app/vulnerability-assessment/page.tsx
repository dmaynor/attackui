"use client";

import { useState, type FormEvent, useEffect } from 'react';
import { prioritizeVulnerabilities, type PrioritizeVulnerabilitiesInput, type PrioritizeVulnerabilitiesOutput } from '@/ai/flows/vulnerability-assessment-agent';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { PageHeader } from '@/components/common/PageHeader';
import { TerminalOutput } from '@/components/common/TerminalOutput';
import { LoadingSpinner } from '@/components/common/LoadingSpinner';
import { ShieldAlert, AlertTriangle, ListChecks } from 'lucide-react';
import { useToast } from "@/hooks/use-toast";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";

const exampleVulnerabilityData = `
- SQL Injection on login page (login.php?user=*)
- Outdated Apache Server version 2.4.29 (known RCE CVE-2021-42013)
- Exposed .git directory at /.git/
- Directory listing enabled on /uploads/
- Weak password policy for user accounts
- Cross-Site Scripting (XSS) in search functionality (search.php?query=<script>...)
`;

export default function VulnerabilityAssessmentPage() {
  const [vulnerabilityDataInput, setVulnerabilityDataInput] = useState('');
  const [prioritizedResult, setPrioritizedResult] = useState<PrioritizeVulnerabilitiesOutput | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();

  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setIsLoading(true);
    setError(null);
    setPrioritizedResult(null);

    if (!vulnerabilityDataInput.trim()) {
      setError("Vulnerability data cannot be empty.");
      setIsLoading(false);
      toast({
        title: "Input Error",
        description: "Please provide details about identified vulnerabilities.",
        variant: "destructive",
      });
      return;
    }

    try {
      const input: PrioritizeVulnerabilitiesInput = { vulnerabilityData: vulnerabilityDataInput };
      const result = await prioritizeVulnerabilities(input);
      setPrioritizedResult(result);
      toast({
        title: "Assessment Complete",
        description: "Vulnerabilities prioritized successfully.",
        className: "bg-primary text-primary-foreground border-primary",
      });
    } catch (e) {
      const errorMsg = e instanceof Error ? e.message : "An unknown error occurred.";
      setError(errorMsg);
      toast({
        title: "Error Assessing",
        description: `Failed to prioritize vulnerabilities: ${errorMsg}`,
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleUseExample = () => {
    setVulnerabilityDataInput(exampleVulnerabilityData.trim());
     toast({
      title: "Example Loaded",
      description: "Example vulnerability data has been loaded.",
    });
  };

  useEffect(() => {
    toast({
      title: "Vulnerability Assessment",
      description: "Input vulnerability data to see AI-powered prioritization.",
    });
  }, [toast]);

  const getRiskBadgeVariant = (score: number): "default" | "secondary" | "destructive" => {
    if (score >= 7) return "destructive";
    if (score >= 4) return "default"; // 'default' is primary, visually distinct
    return "secondary";
  };


  return (
    <div className="animate-fadeIn">
      <PageHeader
        title="Vulnerability Assessment"
        description="Input details of identified vulnerabilities. The AI will assess and prioritize them based on risk and impact."
        icon={ShieldAlert}
      />

      <Card className="shadow-lg">
         <CardContent className="p-6">
          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <div className="flex justify-between items-center mb-1">
                <Label htmlFor="vulnerabilityData" className="block text-sm font-medium text-foreground">
                  Vulnerability Data
                </Label>
                <Button type="button" variant="link" size="sm" onClick={handleUseExample} className="text-primary p-0 h-auto">
                  Use Example Data
                </Button>
              </div>
              <Textarea
                id="vulnerabilityData"
                value={vulnerabilityDataInput}
                onChange={(e) => setVulnerabilityDataInput(e.target.value)}
                placeholder="Enter identified vulnerabilities, one per line. Include details like type, location, and potential impact..."
                rows={10}
                className="font-mono bg-input border-border focus:ring-primary text-sm"
                disabled={isLoading}
              />
              <p className="mt-2 text-xs text-muted-foreground">
                Provide a list or description of vulnerabilities found (e.g., from manual testing, other tools, or reconnaissance).
              </p>
            </div>

            <Button type="submit" disabled={isLoading} className="w-full sm:w-auto bg-primary hover:bg-primary/90 text-primary-foreground font-semibold">
              {isLoading ? <LoadingSpinner size={20} className="mr-2" /> : <ListChecks className="mr-2 h-5 w-5" />}
              Prioritize Vulnerabilities
            </Button>
          </form>
        </CardContent>
      </Card>

      {error && (
        <Alert variant="destructive" className="mt-6 animate-shake">
          <AlertTriangle className="h-5 w-5" />
          <AlertTitle>Processing Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {isLoading && !prioritizedResult && (
         <TerminalOutput 
            title="Assessing Vulnerabilities..." 
            content="AI is analyzing and prioritizing the provided data. Please wait..."
            className="mt-6"
            contentClassName="text-primary animate-pulse"
          />
      )}

      {prioritizedResult && !isLoading && (
        <Card className="mt-6 shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-primary">
              <ListChecks className="h-6 w-6" />
              Prioritized Vulnerabilities Report
            </CardTitle>
            <CardDescription>
              Vulnerabilities are scored from 0 (Low) to 10 (Critical).
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead className="w-[100px]">Risk Score</TableHead>
                  <TableHead>Vulnerability</TableHead>
                  <TableHead>Explanation</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {prioritizedResult.prioritizedVulnerabilities.length > 0 ? (
                  prioritizedResult.prioritizedVulnerabilities.map((item, index) => (
                    <TableRow key={index}>
                      <TableCell>
                        <Badge variant={getRiskBadgeVariant(item.riskScore)} className="text-sm px-3 py-1">
                          {item.riskScore.toFixed(1)}
                        </Badge>
                      </TableCell>
                      <TableCell className="font-medium text-foreground">{item.vulnerability}</TableCell>
                      <TableCell className="text-muted-foreground text-xs">{item.explanation}</TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={3} className="text-center text-muted-foreground">
                      No vulnerabilities were prioritized, or the input data was insufficient.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
